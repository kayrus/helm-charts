# Default values for ironic.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value
#
global:
  imageNamespace: monsoon
  imageRepository: REQUIRED
  ironicApiPortInternal: '6385'
  ironicTftpIP: null
  ironicTftpPortPublic: '69'
  osprofiler: {}
  inspectordbName: ironic_inspector
  inspectordbUser: ironic_inspector
  dbname: ironic
  dbUser: ironic
  pgbouncer:
    enabled: true
  fernetRouter:
    imageVersion: 'latest'

osprofiler:
    enabled: false

pod:
  replicas:
    api: 2
    inspector: 1
    pxe: 1
  lifecycle:
    upgrades:
      deployments:
        revisionHistory: 5
        podReplacementStrategy: RollingUpdate
        rollingUpdate:
           maxUnavailable: 0
           maxSurge: 1

imageVersion: null
imageVersionIronicApi: null
imageVersionIronicConductor: null
imageVersionIronicInspector: null
imageVersionIronicPXE: null
swiftMultiTenant: True

debug: "True"

api:
  override: {}

inspector:
  portInternal: '5050'
  dhcp:
    port: '67'
    proxyPort: '4011'
    ip: null
    range: null
    options:
      router: null

conductor:
  hosts: []
  deploy:
    protocol: 'http'
    port: 8088

agent:
  deployLogs:
    collect: "on_failure"
    storageBackend: "local"
    imageRepository: 30

console:
  secret: null

tftpIP: null
tftpFiles:
  undionly.kpxe: http://boot.ipxe.org/undionly.kpxe

portMetrics: '9102'

networkManagementuuid: DEFINE_IN_REGION_CHART
networkCleaninguuid: DEFINE_IN_REGION_CHART
swiftAccount: null
swiftTempurl: null

pgmetrics:
  name: ironic

postgresql:
  imageTag: '9.4.14'
  postgresDatabase: ironic
  dbInit: ironic-db-init
  dbMaintain: ironic-db-maintain
  users:
    ironic: {}
    ironicInspector: {}
  persistence:
    enabled: true
    existingClaim: db-ironic-pvclaim
  backup:
    enabled: true
    metrics: true
    imageTag: v0.5.12
    osPassword: null

vice_president: true

logging:
    formatters:
        context:
            class: oslo_log.formatters.ContextFormatter
        default:
            format: "%(message)s"
    handlers:
        stdout:
            class: StreamHandler
            args: "(sys.stdout,)"
            formatter: context
        sentry:
            class: raven.handlers.logging.SentryHandler
            level: ERROR
            args: "()"
        "null":
            class: logging.NullHandler
            formatter: default
            args: "()"
    loggers:
        root:
            handlers: stdout, sentry
            level: WARNING
        ironic:
            handlers: stdout, sentry
            level: DEBUG
        eventlet.wsgi.server:
            handlers: stdout, sentry
            level: INFO
        amqp:
            handlers: stdout, sentry
            level: WARNING
        amqplib:
            handlers: stdout, sentry
            level: WARNING
        sqlalchemy:
            handlers: stdout, sentry
            level: WARNING
        boto:
            handlers: stdout, sentry
            level: WARNING
        suds:
            handlers: stdout, sentry
            level: INFO
        eventlet.wsgi.server:
            handlers: stdout, sentry
            level: INFO
